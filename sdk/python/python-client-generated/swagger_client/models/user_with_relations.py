# coding: utf-8

"""
    sci-log-db

    SciLogDB  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserWithRelations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'username': 'str',
        'roles': 'list[str]',
        'location': 'str',
        'unx_group': 'str',
        'user_credentials': 'UserCredentialsWithRelations'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'username': 'username',
        'roles': 'roles',
        'location': 'location',
        'unx_group': 'unxGroup',
        'user_credentials': 'userCredentials'
    }

    def __init__(self, id=None, email=None, first_name=None, last_name=None, username=None, roles=None, location=None, unx_group=None, user_credentials=None):  # noqa: E501
        """UserWithRelations - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._username = None
        self._roles = None
        self._location = None
        self._unx_group = None
        self._user_credentials = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if username is not None:
            self.username = username
        if roles is not None:
            self.roles = roles
        if location is not None:
            self.location = location
        if unx_group is not None:
            self.unx_group = unx_group
        if user_credentials is not None:
            self.user_credentials = user_credentials

    @property
    def id(self):
        """Gets the id of this UserWithRelations.  # noqa: E501


        :return: The id of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserWithRelations.


        :param id: The id of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this UserWithRelations.  # noqa: E501


        :return: The email of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserWithRelations.


        :param email: The email of this UserWithRelations.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserWithRelations.  # noqa: E501


        :return: The first_name of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserWithRelations.


        :param first_name: The first_name of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserWithRelations.  # noqa: E501


        :return: The last_name of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserWithRelations.


        :param last_name: The last_name of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this UserWithRelations.  # noqa: E501


        :return: The username of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserWithRelations.


        :param username: The username of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def roles(self):
        """Gets the roles of this UserWithRelations.  # noqa: E501


        :return: The roles of this UserWithRelations.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this UserWithRelations.


        :param roles: The roles of this UserWithRelations.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def location(self):
        """Gets the location of this UserWithRelations.  # noqa: E501


        :return: The location of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UserWithRelations.


        :param location: The location of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def unx_group(self):
        """Gets the unx_group of this UserWithRelations.  # noqa: E501


        :return: The unx_group of this UserWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._unx_group

    @unx_group.setter
    def unx_group(self, unx_group):
        """Sets the unx_group of this UserWithRelations.


        :param unx_group: The unx_group of this UserWithRelations.  # noqa: E501
        :type: str
        """

        self._unx_group = unx_group

    @property
    def user_credentials(self):
        """Gets the user_credentials of this UserWithRelations.  # noqa: E501


        :return: The user_credentials of this UserWithRelations.  # noqa: E501
        :rtype: UserCredentialsWithRelations
        """
        return self._user_credentials

    @user_credentials.setter
    def user_credentials(self, user_credentials):
        """Sets the user_credentials of this UserWithRelations.


        :param user_credentials: The user_credentials of this UserWithRelations.  # noqa: E501
        :type: UserCredentialsWithRelations
        """

        self._user_credentials = user_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserWithRelations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserWithRelations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
