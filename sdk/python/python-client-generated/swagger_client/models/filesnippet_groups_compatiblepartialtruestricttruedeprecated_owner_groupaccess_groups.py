# coding: utf-8

"""
    sci-log-db

    SciLogDB  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_group': 'str',
        'access_groups': 'list[str]',
        'id': 'str',
        'snippet_type': 'str',
        'is_private': 'bool',
        'default_order': 'float',
        'created_at': 'datetime',
        'created_by': 'str',
        'updated_at': 'datetime',
        'expires_at': 'datetime',
        'updated_by': 'str',
        'create_acl': 'list[str]',
        'read_acl': 'list[str]',
        'update_acl': 'list[str]',
        'delete_acl': 'list[str]',
        'share_acl': 'list[str]',
        'admin_acl': 'list[str]',
        'calculated_acls': 'str',
        'parent_id': 'str',
        'tags': 'list[str]',
        'dashboard_name': 'str',
        'versionable': 'bool',
        'deleted': 'bool',
        'name': 'str',
        'description': 'str',
        'filename': 'str',
        'file_extension': 'str',
        'content_type': 'str',
        'access_hash': 'str',
        'file_id': 'str'
    }

    attribute_map = {
        'owner_group': 'ownerGroup',
        'access_groups': 'accessGroups',
        'id': 'id',
        'snippet_type': 'snippetType',
        'is_private': 'isPrivate',
        'default_order': 'defaultOrder',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'updated_at': 'updatedAt',
        'expires_at': 'expiresAt',
        'updated_by': 'updatedBy',
        'create_acl': 'createACL',
        'read_acl': 'readACL',
        'update_acl': 'updateACL',
        'delete_acl': 'deleteACL',
        'share_acl': 'shareACL',
        'admin_acl': 'adminACL',
        'calculated_acls': 'calculatedACLs',
        'parent_id': 'parentId',
        'tags': 'tags',
        'dashboard_name': 'dashboardName',
        'versionable': 'versionable',
        'deleted': 'deleted',
        'name': 'name',
        'description': 'description',
        'filename': 'filename',
        'file_extension': 'fileExtension',
        'content_type': 'contentType',
        'access_hash': 'accessHash',
        'file_id': '_fileId'
    }

    def __init__(self, owner_group=None, access_groups=None, id=None, snippet_type=None, is_private=None, default_order=None, created_at=None, created_by=None, updated_at=None, expires_at=None, updated_by=None, create_acl=None, read_acl=None, update_acl=None, delete_acl=None, share_acl=None, admin_acl=None, calculated_acls=None, parent_id=None, tags=None, dashboard_name=None, versionable=None, deleted=None, name=None, description=None, filename=None, file_extension=None, content_type=None, access_hash=None, file_id=None):  # noqa: E501
        """FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups - a model defined in Swagger"""  # noqa: E501
        self._owner_group = None
        self._access_groups = None
        self._id = None
        self._snippet_type = None
        self._is_private = None
        self._default_order = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._expires_at = None
        self._updated_by = None
        self._create_acl = None
        self._read_acl = None
        self._update_acl = None
        self._delete_acl = None
        self._share_acl = None
        self._admin_acl = None
        self._calculated_acls = None
        self._parent_id = None
        self._tags = None
        self._dashboard_name = None
        self._versionable = None
        self._deleted = None
        self._name = None
        self._description = None
        self._filename = None
        self._file_extension = None
        self._content_type = None
        self._access_hash = None
        self._file_id = None
        self.discriminator = None
        if owner_group is not None:
            self.owner_group = owner_group
        if access_groups is not None:
            self.access_groups = access_groups
        if id is not None:
            self.id = id
        if snippet_type is not None:
            self.snippet_type = snippet_type
        if is_private is not None:
            self.is_private = is_private
        if default_order is not None:
            self.default_order = default_order
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by
        if updated_at is not None:
            self.updated_at = updated_at
        if expires_at is not None:
            self.expires_at = expires_at
        if updated_by is not None:
            self.updated_by = updated_by
        if create_acl is not None:
            self.create_acl = create_acl
        if read_acl is not None:
            self.read_acl = read_acl
        if update_acl is not None:
            self.update_acl = update_acl
        if delete_acl is not None:
            self.delete_acl = delete_acl
        if share_acl is not None:
            self.share_acl = share_acl
        if admin_acl is not None:
            self.admin_acl = admin_acl
        if calculated_acls is not None:
            self.calculated_acls = calculated_acls
        if parent_id is not None:
            self.parent_id = parent_id
        if tags is not None:
            self.tags = tags
        if dashboard_name is not None:
            self.dashboard_name = dashboard_name
        if versionable is not None:
            self.versionable = versionable
        if deleted is not None:
            self.deleted = deleted
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if filename is not None:
            self.filename = filename
        if file_extension is not None:
            self.file_extension = file_extension
        if content_type is not None:
            self.content_type = content_type
        if access_hash is not None:
            self.access_hash = access_hash
        if file_id is not None:
            self.file_id = file_id

    @property
    def owner_group(self):
        """Gets the owner_group of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        ownerGroup field is deprecated. Please create an ACL upfront and reference it through the aclId at snippet creation  # noqa: E501

        :return: The owner_group of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._owner_group

    @owner_group.setter
    def owner_group(self, owner_group):
        """Sets the owner_group of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        ownerGroup field is deprecated. Please create an ACL upfront and reference it through the aclId at snippet creation  # noqa: E501

        :param owner_group: The owner_group of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._owner_group = owner_group

    @property
    def access_groups(self):
        """Gets the access_groups of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The access_groups of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_groups

    @access_groups.setter
    def access_groups(self, access_groups):
        """Sets the access_groups of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param access_groups: The access_groups of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._access_groups = access_groups

    @property
    def id(self):
        """Gets the id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param id: The id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def snippet_type(self):
        """Gets the snippet_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Defines what type of information snippet is added, such as paragraph, image etc.  # noqa: E501

        :return: The snippet_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._snippet_type

    @snippet_type.setter
    def snippet_type(self, snippet_type):
        """Sets the snippet_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Defines what type of information snippet is added, such as paragraph, image etc.  # noqa: E501

        :param snippet_type: The snippet_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._snippet_type = snippet_type

    @property
    def is_private(self):
        """Gets the is_private of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Private snippets are meant not to be exported, e.g. as metadata to the data catalog. Often used for chat like communication  # noqa: E501

        :return: The is_private of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Private snippets are meant not to be exported, e.g. as metadata to the data catalog. Often used for chat like communication  # noqa: E501

        :param is_private: The is_private of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def default_order(self):
        """Gets the default_order of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Default display order is given by createdAt Time in ms*1000. Override to allow to place snippet between existing other snippets created in the past  # noqa: E501

        :return: The default_order of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: float
        """
        return self._default_order

    @default_order.setter
    def default_order(self, default_order):
        """Sets the default_order of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Default display order is given by createdAt Time in ms*1000. Override to allow to place snippet between existing other snippets created in the past  # noqa: E501

        :param default_order: The default_order of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: float
        """

        self._default_order = default_order

    @property
    def created_at(self):
        """Gets the created_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The created_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param created_at: The created_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        email of the user adding this view  # noqa: E501

        :return: The created_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        email of the user adding this view  # noqa: E501

        :param created_by: The created_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The updated_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param updated_at: The updated_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def expires_at(self):
        """Gets the expires_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Date after which the snippet becomes read only.  # noqa: E501

        :return: The expires_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Date after which the snippet becomes read only.  # noqa: E501

        :param expires_at: The expires_at of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def updated_by(self):
        """Gets the updated_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        email of the user updating this view  # noqa: E501

        :return: The updated_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        email of the user updating this view  # noqa: E501

        :param updated_by: The updated_by of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def create_acl(self):
        """Gets the create_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The create_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._create_acl

    @create_acl.setter
    def create_acl(self, create_acl):
        """Sets the create_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param create_acl: The create_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._create_acl = create_acl

    @property
    def read_acl(self):
        """Gets the read_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The read_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_acl

    @read_acl.setter
    def read_acl(self, read_acl):
        """Sets the read_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param read_acl: The read_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._read_acl = read_acl

    @property
    def update_acl(self):
        """Gets the update_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The update_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._update_acl

    @update_acl.setter
    def update_acl(self, update_acl):
        """Sets the update_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param update_acl: The update_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._update_acl = update_acl

    @property
    def delete_acl(self):
        """Gets the delete_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The delete_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._delete_acl

    @delete_acl.setter
    def delete_acl(self, delete_acl):
        """Sets the delete_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param delete_acl: The delete_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._delete_acl = delete_acl

    @property
    def share_acl(self):
        """Gets the share_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The share_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._share_acl

    @share_acl.setter
    def share_acl(self, share_acl):
        """Sets the share_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param share_acl: The share_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._share_acl = share_acl

    @property
    def admin_acl(self):
        """Gets the admin_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The admin_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._admin_acl

    @admin_acl.setter
    def admin_acl(self, admin_acl):
        """Sets the admin_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param admin_acl: The admin_acl of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._admin_acl = admin_acl

    @property
    def calculated_acls(self):
        """Gets the calculated_acls of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        ACL flags (UDSA) calculated for current user, taking her role into account  # noqa: E501

        :return: The calculated_acls of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._calculated_acls

    @calculated_acls.setter
    def calculated_acls(self, calculated_acls):
        """Sets the calculated_acls of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        ACL flags (UDSA) calculated for current user, taking her role into account  # noqa: E501

        :param calculated_acls: The calculated_acls of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._calculated_acls = calculated_acls

    @property
    def parent_id(self):
        """Gets the parent_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The parent_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param parent_id: The parent_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def tags(self):
        """Gets the tags of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501


        :return: The tags of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.


        :param tags: The tags of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def dashboard_name(self):
        """Gets the dashboard_name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Human readable name of single snippet  # noqa: E501

        :return: The dashboard_name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_name

    @dashboard_name.setter
    def dashboard_name(self, dashboard_name):
        """Sets the dashboard_name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Human readable name of single snippet  # noqa: E501

        :param dashboard_name: The dashboard_name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._dashboard_name = dashboard_name

    @property
    def versionable(self):
        """Gets the versionable of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Versionable snippets will create a new history entry upon update.  # noqa: E501

        :return: The versionable of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: bool
        """
        return self._versionable

    @versionable.setter
    def versionable(self, versionable):
        """Sets the versionable of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Versionable snippets will create a new history entry upon update.  # noqa: E501

        :param versionable: The versionable of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: bool
        """

        self._versionable = versionable

    @property
    def deleted(self):
        """Gets the deleted of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Defines whether the snippet has been deleted.   # noqa: E501

        :return: The deleted of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Defines whether the snippet has been deleted.   # noqa: E501

        :param deleted: The deleted of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Optional name of file as presented to user in GUI  # noqa: E501

        :return: The name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Optional name of file as presented to user in GUI  # noqa: E501

        :param name: The name of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Optional detailed definition of contents and purpose of this file  # noqa: E501

        :return: The description of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Optional detailed definition of contents and purpose of this file  # noqa: E501

        :param description: The description of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filename(self):
        """Gets the filename of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Name of the file  # noqa: E501

        :return: The filename of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Name of the file  # noqa: E501

        :param filename: The filename of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def file_extension(self):
        """Gets the file_extension of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        File extension of the file  # noqa: E501

        :return: The file_extension of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        File extension of the file  # noqa: E501

        :param file_extension: The file_extension of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def content_type(self):
        """Gets the content_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Content type of the file, e.g. image/jpeg  # noqa: E501

        :return: The content_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Content type of the file, e.g. image/jpeg  # noqa: E501

        :param content_type: The content_type of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def access_hash(self):
        """Gets the access_hash of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        Access hash for directly accessing the resource.  # noqa: E501

        :return: The access_hash of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._access_hash

    @access_hash.setter
    def access_hash(self, access_hash):
        """Sets the access_hash of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        Access hash for directly accessing the resource.  # noqa: E501

        :param access_hash: The access_hash of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._access_hash = access_hash

    @property
    def file_id(self):
        """Gets the file_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501

        File id of the file  # noqa: E501

        :return: The file_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.

        File id of the file  # noqa: E501

        :param file_id: The file_id of this FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups.  # noqa: E501
        :type: str
        """

        self._file_id = file_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesnippetGroupsCompatiblepartialtruestricttruedeprecatedOwnerGroupaccessGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
